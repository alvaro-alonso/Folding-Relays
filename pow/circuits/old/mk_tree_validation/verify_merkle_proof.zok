import "hashes/pedersen/512bit.zok" as pedersenhash
import "utils/pack/pack128.zok" as pack128

import "utils/pack/unpack128.zok" as unpack128

import "hashes/sha256/1024bit.zok" as sha256for1024

import "../sha256only.zok" as sha256only

def create_hash(field[5] preimage) -> (field[256]):
	a = unpack128(preimage[0])
	b = unpack128(preimage[1])
	c = unpack128(preimage[2])
	d = unpack128(preimage[3])
	e = unpack128(preimage[4])

	field[256] preimage1 = [...a, ...b]
    field[256] preimage2 = [...c, ...d]
    field[256] preimage3 = [...[...e, 1], ...[0; 127]]
    field[256] dummy = [...[0; 246], ...[1, 0, 1, 0, 0, 0, 0, 0, 0, 0]] //second array indicates length of preimage = 640bit

    intermediary = sha256for1024(preimage1, preimage2, preimage3, dummy)
    
	return sha256only(intermediary)

    
def main(field[5] preimage, private field[1][256] path, private field[1] lr) -> (field[4]):
	unpacked_proof_header = create_hash(preimage)
	field[256] layer0 = if lr[0] == 0 then pedersenhash([...path[0], ...unpacked_proof_header]) else pedersenhash([...unpacked_proof_header, ...path[0]]) fi
	res0 = pack128(layer0[0..128])
	res1 = pack128(layer0[128..256])
	field[2] proof_header = [pack128(unpacked_proof_header[0..128]), pack128(unpacked_proof_header[128..256])]
	return [...proof_header, res0, res1]