// import "hashes/poseidon/poseidon" as poseidon;
// TODO: maybe change pedersen for poseidon hashes??
import "hashes/pedersen/512bit" as pedersen;
import "utils/casts/u32_8_to_bool_256" as cast;
import "utils/pack/bool/pack128" as pack;
import "utils/casts/field_to_u32";


def generateMerkleTree<LEAFS_NUM>(u32[LEAFS_NUM][8] leafs, u32 tree_depth) -> field {

	// assert that LEAFS_NUM is a power of 2
	assert(field_to_u32(2 ** tree_depth) == LEAFS_NUM);

	field[LEAFS_NUM] mut merkleTree = [0; LEAFS_NUM];
	for u32 i in 0..LEAFS_NUM {
		bool[256] leaf_bits = cast(leafs[i]);
		merkleTree[i] = poseidon([pack(leaf_bits[0..128]), pack(leaf_bits[128..256])]);
	}

	for u32 i in 0..tree_depth {
		u32 step_size = field_to_u32(2 ** (i + 1));
		u32 step_number = (LEAFS_NUM / step_size);
		for u32 j in  0..step_number {
			u32 leftIndex = j * step_size;
			u32 rightIndex = leftIndex + step_size / 2;
			merkleTree[leftIndex] = poseidon([merkleTree[leftIndex], merkleTree[rightIndex]]);  
		}
	}

    return merkleTree[0];
}
